#!/usr/local/epd/bin/python

from math import sqrt
import sys
import csv
import os
import re
import nibabel as ni
import nipype.interfaces.fsl as fsl
import numpy as np

ANATOMY_PATH='fs_ss_anatomy'
WRITE_PATH='/home/jagust/cwang/cm'
ANATOMY_FILE='rad_nu_mri.nii'
R_THRESHOLD = 90
V_THRESHOLD = 90

class CMFinder:
   
    def vfindcm(self, filename):
        """returns the center of mass of a brain from a .nii file in the current directory as a list of integers corresponding to the x, y, and z coordinates, respectively"""
        com = fsl.ImageStats()
        print os.getcwd()
        com.inputs.in_file=filename
        com.inputs.op_string='-c'
        output = com.run()
        assert output.runtime.returncode == 0, "return code non-zero"
        cm = output.outputs.out_stat 
        dist = sqrt(float(sum([x**2 for x in cm])))
        if dist > V_THRESHOLD:
            cm = cm + [dist, '!off center']
        else:
            cm = cm + [dist,'okay']       
        return cm 
    
    def rfindcm(self, filename):
        """returns the center of mass of a brain from a .nii file in the current directory as a list of floating point numbers corresponding to the x, y, and z coordinates, respectively"""

        com = fsl.ImageStats()
        com.inputs.in_file=filename
        com.inputs.op_string='-C'
        output = com.run()
        assert output.runtime.returncode == 0, "return code non-zero"
        cm = output.outputs.out_stat
        dist = sqrt(float(sum([x**2 for x in cm]))) 
        if dist > R_THRESHOLD:
            cm = cm + [dist, '!off center']
        else:
            cm = cm + [dist, 'okay']
        return cm

class CSVOut:

    def write(self, filename, data):
        """Creates a new csv file, if it does not already exist, and writes a line of data to it"""
        os.chdir(WRITE_PATH)
        if not re.search('.csv', filename):
           filename = filename + '.csv'     
        writer = csv.writer(open(filename, 'w'), delimiter=',')
        writer.writerow(['id', 'x CM', 'y CM','z CM', 'distance', 'flags?'])
        writer.writerow(data)    

    def add(self, filename, data):
        """Appends a line of data to a csv file, or creates the file and then writes to it if it does not exist"""     
        os.chdir(WRITE_PATH)

        if not re.search('.csv', filename):
           filename = filename + '.csv'

        if filename not in os.listdir('.'):
            self.write(filename, data)
        else:
            writer = csv.writer(open(filename, 'a'), delimiter=',')
            writer.writerow(data)

def main():
    """Finds the center of mass of a brain from a .nii file and writes it to a .csv file
    Expects the path for the output file as first argument
    Expects the path to a .nii file as second argument. 
    
    Additionally, if the function is called from a directory containing B* subdirectories, the function can alternatively be called with one argument, the patient ID, and will look for a .nii file under argv[1]/fs_ss_anatomy/rad_nu_mri.nii.

    -w will overwrite previous .csv data

    -R will return real-world spatial data, -v will return voxel data.
    Defaults to -v.

    Do not run inside patient (B*) directory

    Syntax:
    python cm.py WRITE_FILE NII_FILE [mode [overwrite]]"""
    
    print "Running!"
    print sys.argv
    if len(sys.argv) < 3:
        return    

    if re.match('B[0-9]{2}-[0-9]{3}', sys.argv[2]) and sys.argv[2] in os.listdir('.'):
        print "Match found!"
        try:
            os.chdir(os.path.join(sys.argv[2], ANATOMY_PATH))
            finder = CMFinder()
            writer = CSVOut()
            data = [sys.argv[2]] + finder.vfindcm(ANATOMY_FILE)
            if '-w' in sys.argv:
                writer.write(sys.argv[1], data)
            else:
                writer.add(sys.argv[1], data)
        except OSError, e:
            print "Path does not exist!"           
    else:
        id = '' 
        pathlst = re.split('/', sys.argv[2])
        for dir in pathLst[:-1]:
            os.chdir(dir)
            if re.match('B[0-9]{2}-[0-9]{3}', dir):
                id = dir
        if id == '':
            print 'No patient ID found!'
            return
        filename = pathLst[-1]
        arg = ''
        finder = CMFinder()
        writer = CSVOut()

        if '-R' in sys.argv:
            data = [id] + finder.rfindcm(filename)
            if '-w' in sys.argv:
                writer.write(sys.argv[1], data)
            else:
                writer.add(sys.argv[1], data)
        else:
            data = [id] + finder.vfindcm(filename) 
            if '-w' in sys.argv:
                writer.write(sys.argv[1], data)
            else:
                writer.add(sys.argv[1], data)


main()
